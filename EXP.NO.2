{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a0694b53-1d2d-402a-8adc-032e77425399",
   "metadata": {},
   "source": [
    "### Rushi Ex.No.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "43ce6035-ee4b-4e35-a96a-bd748f0ee81f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Full-stack Developer\n"
     ]
    }
   ],
   "source": [
    "class Employee:\n",
    "    def __init__ (\n",
    "            self,\n",
    "            designation : str = 'Developer',\n",
    "            frontend : bool = True,\n",
    "            backend : bool = True\n",
    "    ):\n",
    "        self.designation = designation\n",
    "        self.frontend = frontend\n",
    "        self.backend = backend\n",
    "\n",
    "    def __repr__ (self):\n",
    "        return '{} (Frontend: {}, Backend: {})'.format(self.designation, self.frontend, self.backend)\n",
    "   \n",
    "    def verifier(self):\n",
    "        if self.frontend and self.backend:\n",
    "            return \"Full-stack Developer\"\n",
    "        elif self.frontend:\n",
    "            return \"Frontend Developer\"\n",
    "        elif self.backend:\n",
    "            return \"Backend Developer\"\n",
    "        else:\n",
    "            return \"Developer with no specific skills\"\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    firstEmployee = Employee()\n",
    "    print(firstEmployee.verifier())  # Call the verifier method to display output\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d160342c-8f5f-45eb-9e57-4f6c0be0227e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
